/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package be.nbb.demetra.various;

import ec.nbdemetra.ui.calendars.CustomDialogDescriptor;
import ec.nbdemetra.ui.properties.DataFormatComponent;
import ec.nbdemetra.ui.properties.FileLoaderFileFilter;
import ec.tss.tsproviders.IFileLoader;
import ec.tss.tsproviders.TsProviders;
import ec.tss.tsproviders.spreadsheet.SpreadSheetBean;
import ec.tss.tsproviders.spreadsheet.SpreadSheetProvider;
import ec.tss.tsproviders.utils.DataFormat;
import ec.tss.tsproviders.utils.IConstraint;
import ec.util.completion.ext.DesktopFileAutoCompletionSource;
import ec.util.completion.swing.FileListCellRenderer;
import ec.util.completion.swing.JAutoCompletion;
import ec.util.desktop.Desktop;
import ec.util.desktop.DesktopManager;
import ec.util.various.swing.TextPrompt;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.FileFilter;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JFileChooser;
import org.openide.DialogDescriptor;

/**
 *
 * @author charphi
 */
public class SpreadSheetBeanPanel extends javax.swing.JPanel {

    public static final String FILE_PROPERTY = "file";
    public static final String DATA_FORMAT_PROPERTY = "dataFormat";
    final DataFormatComponent dataFormatComponent;
    final IFileLoader loader;
    final JFileChooser fileChooser;

    /**
     * Creates new form SpreadsheetBeanPanel
     */
    public SpreadSheetBeanPanel() {
        initComponents();

        this.loader = TsProviders.find(IFileLoader.class, SpreadSheetProvider.SOURCE);
        this.fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileLoaderFileFilter(loader));

        File[] paths = loader.getPaths();
        ExecutorService executor = Executors.newSingleThreadExecutor();

        JAutoCompletion autoCompletion = new JAutoCompletion(jTextField1);
        autoCompletion.setSource(new DesktopFileAutoCompletionSource(new FileLoaderFileFilter(loader), paths));
        autoCompletion.getList().setCellRenderer(new FileListCellRenderer(null, executor, paths));

        this.dataFormatComponent = new DataFormatComponent();
        jPanel1.add(dataFormatComponent);

        jTextField1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                firePropertyChange(FILE_PROPERTY, null, getFile());
            }
        });
        TextPrompt prompt = new TextPrompt("file path", jTextField1);
        prompt.changeStyle(Font.ITALIC);
        prompt.setForeground(jTextField1.getDisabledTextColor());
        if (DesktopManager.get().isSupported(Desktop.Action.SEARCH)) {
            prompt.setText(prompt.getText() + " or desktop search");
        }
    }

    public void loadBean(SpreadSheetBean bean) {
        setFile(bean.getFile());
        setDataFormat(bean.getDataFormat());
    }

    public void storeBean(SpreadSheetBean bean) {
        bean.setFile(getFile());
        bean.setDataFormat(getDataFormat());
    }

    public File getFile() {
        return new File(jTextField1.getText());
    }

    public void setFile(File file) {
        jTextField1.setText(file.getPath());
    }

    public DataFormat getDataFormat() {
        return dataFormatComponent.getValue();
    }

    public void setDataFormat(DataFormat df) {
        dataFormatComponent.setValue(df);
    }

    public FileFilter getFileFilter() {
        return loader;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SpreadSheetBeanPanel.class, "SpreadSheetBeanPanel.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(SpreadSheetBeanPanel.class, "SpreadSheetBeanPanel.jTextField1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SpreadSheetBeanPanel.class, "SpreadSheetBeanPanel.jLabel2.text")); // NOI18N

        jPanel1.setLayout(new java.awt.BorderLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/folder-open-table.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(SpreadSheetBeanPanel.class, "SpreadSheetBeanPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            jTextField1.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public DialogDescriptor createDialogDescriptor(String title) {
        return new SpreadSheetBeanDialogDescriptor(this, title);
    }

    static class SpreadSheetBeanDialogDescriptor extends CustomDialogDescriptor<SpreadSheetBeanPanel> {

        SpreadSheetBeanDialogDescriptor(SpreadSheetBeanPanel p, String title) {
            super(p, title, p);
            validate(SpreadSheetBeanConstraints.values());
        }

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            validate(SpreadSheetBeanConstraints.values());
        }
    }

    private enum SpreadSheetBeanConstraints implements IConstraint<SpreadSheetBeanPanel> {

        FILE {
                    @Override
                    public String check(SpreadSheetBeanPanel t) {
                        File file = t.getFile();
                        if (file.getPath().isEmpty()) {
                            return "The file path cannot be empty";
                        }
                        if (file.isDirectory()) {
                            return "The file path cannot be a folder";
                        }
                        if (!t.getFileFilter().accept(file)) {
                            return "Invalid file";
                        }
                        return null;
                    }
                },
    }
}
